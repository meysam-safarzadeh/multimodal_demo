name: ML Container CI/CD
on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: ml-trainer
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GH_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build image
        run: docker build -t $ECR_REPOSITORY:${IMAGE_TAG} -f ml/Dockerfile .

      - name: Tag + Push
        run: |
          ECR_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com
          docker tag $ECR_REPOSITORY:${IMAGE_TAG} $ECR_URI/$ECR_REPOSITORY:${IMAGE_TAG}
          docker tag $ECR_REPOSITORY:${IMAGE_TAG} $ECR_URI/$ECR_REPOSITORY:latest
          docker push $ECR_URI/$ECR_REPOSITORY:${IMAGE_TAG}
          docker push $ECR_URI/$ECR_REPOSITORY:latest

      # ðŸš€ Optionally force ECS service to pull new :latest image
      - name: Force new deployment
        if: ${{ vars.UPDATE_SERVICE == 'true' }}
        run: |
          aws ecs update-service \
            --cluster "${{ secrets.ECS_CLUSTER }}" \
            --service "${{ secrets.ECS_SERVICE }}" \
            --force-new-deployment

      # ðŸš€ Optionally run a one-off smoke task using TASK_DEFINITION
      - name: Smoke run task
        if: ${{ vars.SMOKE_RUN == 'true' }}
        run: |
          aws ecs run-task \
            --cluster "${{ secrets.ECS_CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ secrets.TASK_DEFINITION }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNETS }}],securityGroups=[${{ secrets.SECURITY_GROUPS }}],assignPublicIp=ENABLED}"
